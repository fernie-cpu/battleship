{"version":3,"sources":["factories/gameboardFactory.js","factories/shipFactory.js","components/Gameboard.js","factories/playerFactory.js","components/PlayerForm.js","components/GameContainer.js","components/Controls.js","components/Winner.js","App.js","index.js"],"names":["gameboardFactory","ownerName","boardInfo","board","shipsLeft","owner","lastShot","hit","location","_","isEmpty","i","push","ship","beenHit","initBoard","receiveAttack","coords","square","allShipSunk","placeShip","startCoord","isVertical","shipLength","id","shipFactory","hitLocations","Array","position","isSunk","length","Gameboard","player","yourTurn","gameLoop","start","restart","setRestart","isGame","setIsGame","useState","setBoard","generateShipsOnBoard","useCallback","ships","y","Math","round","random","gameboard","alreadyPlaced","j","getRandom","floor","willBePlaced","some","item","includes","useEffect","playerInfo","name","setTimeout","AI","className","map","index","onClick","e","targetCoord","target","split","handleClick","playerFactory","pastShots","num","playRandomMove","ranMove","figureNext","nextMove","console","log","timeout","whileTrue","resetPastShots","PlayerForm","setPlayer1","setStart","p1","setP1","onSubmit","preventDefault","type","placeholder","value","onChange","GameContainer","setShowControls","setWinner","player1","player2","setPlayer2","player1turn","setPlayer1Turn","checkWinner","curPlayer","Controls","Winner","App","showControls","winner","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a67d025.chunk.js","sourcesContent":["import _ from 'lodash';\n\nconst gameboardFactory = (ownerName) => {\n  const boardInfo = {\n    board: [],\n    shipsLeft: true,\n    owner: ownerName,\n    lastShot: {\n      hit: false,\n      location: false,\n    },\n  };\n\n  const initBoard = () => {\n    for (let i = 0; i < 100; i++) {\n      boardInfo.board.push({\n        ship: false,\n        beenHit: false,\n      });\n    }\n  };\n\n  if (_.isEmpty(boardInfo.board)) {\n    initBoard();\n  }\n\n  const allShipSunk = () => {\n    //loop through board\n    for (let square of boardInfo.board) {\n      //check if square conntains ship\n      if (square.ship !== false) {\n        //if it does check if square been hit\n        if (square.beenHit === false) {\n          boardInfo.shipsLeft = true;\n          return;\n        }\n      }\n    }\n    //all squares with a ship has been hit\n    boardInfo.shipsLeft = false;\n  };\n\n  const receiveAttack = (coords) => {\n    boardInfo.board[coords].beenHit = true;\n    if (boardInfo.board[coords].ship !== false) {\n      boardInfo.lastShot.hit = true;\n      boardInfo.lastShot.location = coords;\n    } else {\n      boardInfo.lastShot.hit = false;\n      boardInfo.lastShot.location = false;\n    }\n    allShipSunk();\n  };\n\n  const placeShip = (ship, startCoord) => {\n    if (ship.isVertical) {\n      for (let i = 0; i < ship.shipLength; i++) {\n        boardInfo.board[startCoord + i * 10].ship = ship.id;\n      }\n    } else {\n      for (let i = 0; i < ship.shipLength; i++) {\n        boardInfo.board[startCoord + i].ship = ship.id;\n      }\n    }\n  };\n\n  return { boardInfo, receiveAttack, placeShip };\n};\n\nexport default gameboardFactory;\n","const shipFactory = (id, shipLength, isVertical) => {\n  const hitLocations = Array(shipLength);\n\n  const hit = (position) => {\n    hitLocations[position] = 'x';\n  };\n\n  const isSunk = () => {\n    for (let i = 0; i < hitLocations.length; i++) {\n      if (hitLocations[i] !== 'x') {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return { id, isVertical, shipLength, hit, hitLocations, isSunk };\n};\n\nexport default shipFactory;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport gameboardFactory from '../factories/gameboardFactory';\nimport shipFactory from '../factories/shipFactory';\nimport _ from 'lodash';\n\nconst Gameboard = ({\n  player,\n  yourTurn,\n  gameLoop,\n  start,\n  restart,\n  setRestart,\n  isGame,\n  setIsGame,\n}) => {\n  const [board, setBoard] = useState({});\n\n  const generateShipsOnBoard = useCallback(() => {\n    const ships = [];\n    for (let i = 1; i < 6; i++) {\n      let y = Math.round(Math.random() * 10 + 1) > 5;\n      ships.push(shipFactory(i, i, y));\n    }\n\n    //init the gameboard\n    const gameboard = gameboardFactory(player);\n    // create array that keeps track of squares already placed\n    const alreadyPlaced = [];\n    //loop through array of generated ships\n    for (let j = 0; j < ships.length; j++) {\n      let ship = ships[j];\n      const getRandom = () => {\n        return Math.floor(Math.random() * 100);\n      };\n      let startCoord = getRandom();\n      //square that will be placed if ship is placed at current starting coord\n      let willBePlaced = [];\n      if (ship.isVertical) {\n        for (let i = 0; i < ship.shipLength; i++) {\n          willBePlaced.push(startCoord + i * 10);\n        }\n      } else {\n        for (let i = 0; i < ship.shipLength; i++) {\n          willBePlaced.push(startCoord + i);\n        }\n      }\n      //checks to make sure placement will be valid\n      while (\n        alreadyPlaced.some((item) => willBePlaced.includes(item)) ||\n        (willBePlaced.includes(9) && willBePlaced.includes(10)) ||\n        (willBePlaced.includes(19) && willBePlaced.includes(20)) ||\n        (willBePlaced.includes(29) && willBePlaced.includes(30)) ||\n        (willBePlaced.includes(39) && willBePlaced.includes(40)) ||\n        (willBePlaced.includes(49) && willBePlaced.includes(50)) ||\n        (willBePlaced.includes(59) && willBePlaced.includes(60)) ||\n        (willBePlaced.includes(69) && willBePlaced.includes(70)) ||\n        (willBePlaced.includes(79) && willBePlaced.includes(80)) ||\n        (willBePlaced.includes(89) && willBePlaced.includes(90)) ||\n        willBePlaced.some((item) => item > 99)\n      ) {\n        willBePlaced.length = 0;\n        startCoord = getRandom();\n        if (ship.isVertical) {\n          for (let i = 0; i < ship.shipLength; i++) {\n            willBePlaced.push(startCoord + i * 10);\n          }\n        } else {\n          for (let i = 0; i < ship.shipLength; i++) {\n            willBePlaced.push(startCoord + i);\n          }\n        }\n      }\n      gameboard.placeShip(ship, startCoord);\n      alreadyPlaced.push(...willBePlaced);\n      willBePlaced.length = 0;\n    }\n\n    setBoard(gameboard);\n  }, [player]);\n\n  useEffect(() => {\n    if (start) {\n      generateShipsOnBoard();\n    }\n  }, [start, generateShipsOnBoard]);\n\n  useEffect(() => {\n    if (restart) {\n      setBoard({});\n      generateShipsOnBoard();\n      setRestart(false);\n    }\n  }, [restart, setRestart, generateShipsOnBoard]);\n\n  useEffect(() => {\n    if (!_.isEmpty(board)) {\n      if (board.boardInfo.owner.playerInfo.name !== 'Computer' && yourTurn) {\n        setTimeout(() => {\n          board.receiveAttack(\n            board.boardInfo.owner.AI(board.boardInfo.lastShot)\n          );\n          gameLoop(\n            board.boardInfo.shipsLeft,\n            board.boardInfo.owner.playerInfo.name\n          );\n        }, 500);\n      }\n    }\n  }, [yourTurn, board, gameLoop]);\n\n  const handleClick = (e) => {\n    if (!isGame) {\n      setIsGame(true);\n    }\n    let targetCoord = e.target.id.split('-')[1];\n    if (!board.boardInfo.board[targetCoord].beenHit) {\n      board.receiveAttack(targetCoord);\n      gameLoop(\n        board.boardInfo.shipsLeft,\n        board.boardInfo.owner.playerInfo.name\n      );\n    }\n  };\n\n  return (\n    <div>\n      {_.isEmpty(board) ? null : (\n        <div className={`${yourTurn ? '' : 'hide'}`}>\n          {' '}\n          <h3>{player.playerInfo.name}'s Board</h3>\n          <div className={'gameboard-grid-container'}>\n            {board.boardInfo.board.map((square, index) => {\n              return (\n                <div\n                  onClick={(e) => {\n                    if (yourTurn) {\n                      handleClick(e);\n                    }\n                  }}\n                  key={index}\n                  id={`${player.playerInfo.name}-${index}`}\n                  className={`${\n                    square.ship !== false &&\n                    player.playerInfo.name !== 'Computer'\n                      ? 'ship'\n                      : ''\n                  } ${square.beenHit && square.ship ? 'hit' : ''} ${\n                    player.playerInfo.name === 'Computer' ? 'square-hover' : ''\n                  } \n                  grid-square`}\n                >\n                  {square.beenHit ? 'X' : ''}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Gameboard;\n","const playerFactory = (name) => {\n  const playerInfo = {\n    name: name,\n    pastShots: [],\n  };\n\n  const getRandom = (num) => {\n    return Math.floor(Math.random() * num);\n  };\n\n  const playRandomMove = () => {\n    let ranMove = getRandom(100);\n    while (playerInfo.pastShots.includes(ranMove)) {\n      ranMove = getRandom(100);\n    }\n    playerInfo.pastShots.push(ranMove);\n    return ranMove;\n  };\n\n  const resetPastShots = () => {\n    playerInfo.pastShots.length = 0;\n  };\n\n  const AI = (lastShot) => {\n    if (lastShot.hit) {\n      const figureNext = (lastShot) => {\n        let ranNum = getRandom(4);\n        let nextMove;\n        switch (ranNum) {\n          case 0:\n            nextMove = lastShot.location + 1;\n            break;\n          case 1:\n            nextMove = lastShot.location - 1;\n            break;\n          case 2:\n            nextMove = lastShot.location + 10;\n            break;\n          case 3:\n            nextMove = lastShot.location - 10;\n            break;\n          default:\n            console.log('nah');\n        }\n        return nextMove;\n      };\n\n      let nextMove = figureNext(lastShot);\n      let timeout = 0;\n      let whileTrue = true;\n\n      while (\n        playerInfo.pastShots.includes(nextMove) ||\n        nextMove > 99 ||\n        nextMove < 0\n      ) {\n        nextMove = figureNext(lastShot);\n        timeout++;\n        if (timeout === 50) {\n          whileTrue = false;\n          break;\n        }\n      }\n\n      timeout = 0;\n      if (!whileTrue) {\n        return playRandomMove();\n      } else {\n        playerInfo.pastShots.push(nextMove);\n        return nextMove;\n      }\n    } else {\n      return playRandomMove();\n    }\n  };\n\n  return {\n    playerInfo,\n    AI,\n    resetPastShots,\n  };\n};\n\nexport default playerFactory;\n","import React, { useState } from 'react';\nimport playerFactory from '../factories/playerFactory';\n\nconst PlayerForm = ({ setPlayer1, setStart }) => {\n  const [p1, setP1] = useState('');\n\n  const handleChange = (e) => {\n    setP1(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (p1 === '') {\n      setPlayer1(playerFactory('Player 1'));\n    } else {\n      setPlayer1(playerFactory(p1));\n    }\n    setStart(true);\n  };\n\n  return (\n    <div className='divForm'>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='Enter your name'\n          name='p1'\n          value={p1}\n          onChange={handleChange}\n        />\n        <button>Play</button>\n      </form>\n    </div>\n  );\n};\n\nexport default PlayerForm;\n","import React, { useState, useEffect } from 'react';\nimport Gameboard from './Gameboard';\nimport playerFactory from '../factories/playerFactory';\nimport PlayerForm from './PlayerForm';\n\nconst GameContainer = ({\n  restart,\n  setRestart,\n  isGame,\n  setIsGame,\n  setShowControls,\n  setWinner,\n}) => {\n  const [player1, setPlayer1] = useState({});\n  const [player2, setPlayer2] = useState({});\n  const [player1turn, setPlayer1Turn] = useState(null);\n  const [start, setStart] = useState(false);\n\n  useEffect(() => {\n    // setPlayer1(playerFactory('You'));\n    setPlayer2(playerFactory('Computer'));\n    setPlayer1Turn(false);\n    if (start) {\n      setShowControls(true);\n    }\n  }, [start, setIsGame, setShowControls]);\n\n  useEffect(() => {\n    if (restart) {\n      player1.resetPastShots();\n      setPlayer1Turn(false);\n    }\n  }, [restart, player1]);\n\n  const gameLoop = (checkWinner, curPlayer) => {\n    if (checkWinner) {\n      setPlayer1Turn(!player1turn);\n    } else {\n      curPlayer === 'Computer' ? setWinner(player1) : setWinner(player2);\n      player1.resetPastShots();\n      setPlayer1Turn(false);\n    }\n  };\n\n  return (\n    <div>\n      {!start ? (\n        <PlayerForm setStart={setStart} setPlayer1={setPlayer1} />\n      ) : (\n        <div className='app-gameboard-container'>\n          <Gameboard\n            player={player1}\n            yourTurn={player1turn}\n            gameLoop={gameLoop}\n            start={start}\n            restart={restart}\n            setRestart={setRestart}\n            isGame={isGame}\n            setIsGame={setIsGame}\n          />\n          <Gameboard\n            player={player2}\n            yourTurn={!player1turn}\n            gameLoop={gameLoop}\n            start={start}\n            restart={restart}\n            setRestart={setRestart}\n            isGame={isGame}\n            setIsGame={setIsGame}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default GameContainer;\n","import React from 'react';\n\nconst Controls = ({ setRestart, isGame, setIsGame, setWinner }) => {\n  return (\n    <div className='control'>\n      <button\n        onClick={() => {\n          setIsGame(false);\n          setRestart(true);\n          setWinner(false);\n        }}\n      >\n        {isGame ? 'Restart' : 'Shuffle'}\n      </button>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from 'react';\n\nconst Winner = ({ player }) => {\n  return (\n    <div className='winner'>\n      <h1>{player.playerInfo.name} Wins!</h1>\n    </div>\n  );\n};\n\nexport default Winner;\n","import React, { useState } from 'react';\nimport GameContainer from './components/GameContainer';\nimport Controls from './components/Controls';\nimport Winner from './components/Winner';\n\nconst App = () => {\n  const [restart, setRestart] = useState(false);\n  const [isGame, setIsGame] = useState(false);\n  const [showControls, setShowControls] = useState(false);\n  const [winner, setWinner] = useState(false);\n\n  return (\n    <div className='App'>\n      {winner ? (\n        <Winner player={winner} />\n      ) : (\n        <h1 className='title'>Battleship</h1>\n      )}\n      {showControls ? (\n        <Controls\n          isGame={isGame}\n          setIsGame={setIsGame}\n          setRestart={setRestart}\n          setWinner={setWinner}\n        />\n      ) : null}\n      <GameContainer\n        restart={restart}\n        setRestart={setRestart}\n        isGame={isGame}\n        setIsGame={setIsGame}\n        setShowControls={setShowControls}\n        setWinner={setWinner}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}